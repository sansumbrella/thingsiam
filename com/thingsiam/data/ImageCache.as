package com.thingsiam.data {import flash.display.*;import flash.utils.Dictionary;public class ImageCache extends Object {		/**	*	Stores Bitmaps in flash memory	*	Vector objects stored will be returned as Bitmap copies of the image 	*	Just use the url of the image as the key		*/		public static var _instance:ImageCache;	private var dictionary:Dictionary;		public function ImageCache( enforcer:SingletonEnforcer ){		dictionary = new Dictionary();	}		public static function get instance() : ImageCache { 		if( !_instance ) _instance = new ImageCache( new SingletonEnforcer() );		return _instance; 	}		public function contains( key:String ):Boolean	{		return dictionary[key] != null;	}		public function retrieve( key:String ):DisplayObject	{		var d:DisplayObject = dictionary[key];		if( d == null ) throw new Error("You're trying to retrieve a null DisplayObject. Make sure you have the object before grabbing it.");		if( d is Bitmap )	return new Bitmap( (d as Bitmap).bitmapData.clone() );				var bmd:BitmapData = new BitmapData( d.width, d.height, true, 0x00000000 );		bmd.draw( d );		return new Bitmap(bmd, "auto", true);	}		public function store( key:String, value:DisplayObject ):void	{		if( value is Bitmap ){			dictionary[key] = new Bitmap((value as Bitmap).bitmapData.clone() );		} else {			dictionary[key] = value;		}	}	}}class SingletonEnforcer{}