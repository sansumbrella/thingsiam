package com.thingsiam.math {		/*	*	Basic Vector implementation. Based on Java by Dan Shiffman.	*	*	@author David Wicks	*	@since  22.09.2007	*/	public class Vector3D extends Object {		private var _x:Number;		private var _y:Number;		private var _z:Number;				public function Vector3D( x:Number = 0, y:Number = 0, z:Number = 0 ){			_x = x;			_y = y;			_z = z;		}				//--------------------------------------		//  GETTER/SETTERS		//--------------------------------------				public function get x() : Number { 			return _x; 		}				public function get y() : Number { 			return _y; 		}				public function get z() : Number { 			return _z; 		}				public function set x( arg:Number ) : void { 			_x = arg; 		}				public function set y( arg:Number ) : void { 			_y = arg; 		}				public function set z( arg:Number ) : void { 			_z = arg; 		}		//--------------------------------------		//  PUBLIC METHODS		//--------------------------------------				public function add( v:Vector3D ) : void {			_x += v.x;			_y += v.y;			_z += v.z;		}				public function subtract( v:Vector3D ) : void {			_x -= v.x;			_y -= v.y;			_z -= v.z;		}				public function divide( n:Number ) : void {			_x /= n;			_y /= n;			_z /= n;		}				public function multiply( n:Number ) : void {			_x *= n;			_y *= n;			_z *= n;		}				public function magnitude() : Number {			return Math.sqrt( _x * _x + _y * _y + _z * _z );		}				public function len2():Number		{	//get the length squared (avoid the square root computation)			return ( _x * _x + _y * _y + _z * _z );		}				public function normalize() : void {			var m:Number = magnitude();			if( m > 0 ){				divide(m);			}		}				public function limit( n:Number ) : void {			if( magnitude() > n ){				normalize();				multiply(n);			}		}				public function heading2d() : Number {			var angle:Number = Math.atan2( y, x );			return angle;		}				public static function sub( v1:Vector3D, v2:Vector3D ) : Vector3D {			return new Vector3D( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z );		}				public static function mult( v1:Vector3D, m:Number ) : Vector3D {			return new Vector3D( v1.x * m, v1.y * m,  v1.z * m );		}				public function copy() : Vector3D{			return new Vector3D( _x, _y, _z );		}			}	}